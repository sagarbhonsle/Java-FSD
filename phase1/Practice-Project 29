// Java Program to traverse a Doubly Linked List //



package sample;

 class Node2 {
    int data;
    Node next;
    Node prev;

    Node2(int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

public class DoublyLinkedList {
    private Node head;
    private Node tail;

    public void insert(int data) {
        Node newNode = new Node(data);

        // Empty list

        if (head == null) {
            head = newNode;
            tail = newNode;
            return;
        }

        // Add to the end

        tail.next = newNode;
        newNode.prev = tail;
        tail = newNode;
    }

    public void traverseForward() {
        System.out.println("Traversing forward:");
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("Start");
    }

    public void traverseBackward() {
        System.out.println("Traversing backward:");
        Node current = tail;
        while (current != null) {
            System.out.print(current.data + " <- ");
            current = current.prev;
        }
        System.out.println("End");
    }

    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();

        list.insert(10);
        list.insert(20);
        list.insert(30);
        list.insert(40);

        list.traverseForward();
        list.traverseBackward();
    }
}
